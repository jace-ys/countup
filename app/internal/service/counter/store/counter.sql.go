// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: counter.sql

package counterstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteIncrementRequests = `-- name: DeleteIncrementRequests :exec
TRUNCATE TABLE increment_requests
`

func (q *Queries) DeleteIncrementRequests(ctx context.Context, db DBTX) error {
	_, err := db.Exec(ctx, deleteIncrementRequests)
	return err
}

const getCounter = `-- name: GetCounter :one
SELECT id, count, last_increment_by, last_increment_at, next_finalize_at
FROM counter
WHERE id = 1
`

func (q *Queries) GetCounter(ctx context.Context, db DBTX) (Counter, error) {
	row := db.QueryRow(ctx, getCounter)
	var i Counter
	err := row.Scan(
		&i.ID,
		&i.Count,
		&i.LastIncrementBy,
		&i.LastIncrementAt,
		&i.NextFinalizeAt,
	)
	return i, err
}

const incrementCounter = `-- name: IncrementCounter :exec
UPDATE counter
SET
  count = count + 1,
  last_increment_by = $1,
  last_increment_at = $2,
  next_finalize_at = NULL
WHERE id = 1
`

type IncrementCounterParams struct {
	LastIncrementBy pgtype.Text
	LastIncrementAt pgtype.Timestamptz
}

func (q *Queries) IncrementCounter(ctx context.Context, db DBTX, arg IncrementCounterParams) error {
	_, err := db.Exec(ctx, incrementCounter, arg.LastIncrementBy, arg.LastIncrementAt)
	return err
}

const insertIncrementRequest = `-- name: InsertIncrementRequest :one
WITH inserted AS (
  INSERT INTO increment_requests (requested_by, requested_at)
  VALUES ($1, $2)
  RETURNING requested_by, requested_at
)
SELECT COUNT(*) AS num_requests
FROM increment_requests
`

type InsertIncrementRequestParams struct {
	RequestedBy string
	RequestedAt pgtype.Timestamptz
}

func (q *Queries) InsertIncrementRequest(ctx context.Context, db DBTX, arg InsertIncrementRequestParams) (int64, error) {
	row := db.QueryRow(ctx, insertIncrementRequest, arg.RequestedBy, arg.RequestedAt)
	var num_requests int64
	err := row.Scan(&num_requests)
	return num_requests, err
}

const listIncrementRequests = `-- name: ListIncrementRequests :many
SELECT requested_by, requested_at
FROM increment_requests
`

func (q *Queries) ListIncrementRequests(ctx context.Context, db DBTX) ([]IncrementRequest, error) {
	rows, err := db.Query(ctx, listIncrementRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IncrementRequest
	for rows.Next() {
		var i IncrementRequest
		if err := rows.Scan(&i.RequestedBy, &i.RequestedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetCounter = `-- name: ResetCounter :exec
UPDATE counter
SET
  count = 0,
  last_increment_by = NULL,
  last_increment_at = NULL,
  next_finalize_at = NULL
WHERE id = 1
`

func (q *Queries) ResetCounter(ctx context.Context, db DBTX) error {
	_, err := db.Exec(ctx, resetCounter)
	return err
}

const updateCounterFinalizeTime = `-- name: UpdateCounterFinalizeTime :exec
UPDATE counter
SET
  next_finalize_at = $1
WHERE id = 1
`

func (q *Queries) UpdateCounterFinalizeTime(ctx context.Context, db DBTX, nextFinalizeAt pgtype.Timestamptz) error {
	_, err := db.Exec(ctx, updateCounterFinalizeTime, nextFinalizeAt)
	return err
}
