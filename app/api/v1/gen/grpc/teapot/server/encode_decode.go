// Code generated by goa v3.21.0, DO NOT EDIT.
//
// teapot gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package server

import (
	"context"

	teapotpb "github.com/jace-ys/countup/api/v1/gen/grpc/teapot/pb"
	teapot "github.com/jace-ys/countup/api/v1/gen/teapot"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeEchoResponse encodes responses from the "teapot" service "Echo"
// endpoint.
func EncodeEchoResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*teapot.EchoResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("teapot", "Echo", "*teapot.EchoResult", v)
	}
	resp := NewProtoEchoResponse(result)
	return resp, nil
}

// DecodeEchoRequest decodes requests sent to "teapot" service "Echo" endpoint.
func DecodeEchoRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *teapotpb.EchoRequest
		ok      bool
	)
	{
		if message, ok = v.(*teapotpb.EchoRequest); !ok {
			return nil, goagrpc.ErrInvalidType("teapot", "Echo", "*teapotpb.EchoRequest", v)
		}
	}
	var payload *teapot.EchoPayload
	{
		payload = NewEchoPayload(message)
	}
	return payload, nil
}
