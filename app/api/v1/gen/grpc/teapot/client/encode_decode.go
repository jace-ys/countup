// Code generated by goa v3.21.0, DO NOT EDIT.
//
// teapot gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package client

import (
	"context"

	teapotpb "github.com/jace-ys/countup/api/v1/gen/grpc/teapot/pb"
	teapot "github.com/jace-ys/countup/api/v1/gen/teapot"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildEchoFunc builds the remote method to invoke for "teapot" service "Echo"
// endpoint.
func BuildEchoFunc(grpccli teapotpb.TeapotClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Echo(ctx, reqpb.(*teapotpb.EchoRequest), opts...)
		}
		return grpccli.Echo(ctx, &teapotpb.EchoRequest{}, opts...)
	}
}

// EncodeEchoRequest encodes requests sent to teapot Echo endpoint.
func EncodeEchoRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*teapot.EchoPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("teapot", "Echo", "*teapot.EchoPayload", v)
	}
	return NewProtoEchoRequest(payload), nil
}

// DecodeEchoResponse decodes responses from the teapot Echo endpoint.
func DecodeEchoResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*teapotpb.EchoResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("teapot", "Echo", "*teapotpb.EchoResponse", v)
	}
	res := NewEchoResult(message)
	return res, nil
}
