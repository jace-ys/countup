// Code generated by goa v3.19.1, DO NOT EDIT.
//
// teapot gRPC client CLI support package
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package client

import (
	"encoding/json"
	"fmt"

	teapotpb "github.com/jace-ys/countup/api/v1/gen/grpc/teapot/pb"
	teapot "github.com/jace-ys/countup/api/v1/gen/teapot"
)

// BuildEchoPayload builds the payload for the teapot Echo endpoint from CLI
// flags.
func BuildEchoPayload(teapotEchoMessage string) (*teapot.EchoPayload, error) {
	var err error
	var message teapotpb.EchoRequest
	{
		if teapotEchoMessage != "" {
			err = json.Unmarshal([]byte(teapotEchoMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"text\": \"Quidem inventore.\"\n   }'")
			}
		}
	}
	v := &teapot.EchoPayload{
		Text: message.Text,
	}

	return v, nil
}
