// Code generated by goa v3.19.1, DO NOT EDIT.
//
// api gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package client

import (
	"context"

	api "github.com/jace-ys/countup/api/v1/gen/api"
	apiviews "github.com/jace-ys/countup/api/v1/gen/api/views"
	apipb "github.com/jace-ys/countup/api/v1/gen/grpc/api/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildAuthTokenFunc builds the remote method to invoke for "api" service
// "AuthToken" endpoint.
func BuildAuthTokenFunc(grpccli apipb.APIClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.AuthToken(ctx, reqpb.(*apipb.AuthTokenRequest), opts...)
		}
		return grpccli.AuthToken(ctx, &apipb.AuthTokenRequest{}, opts...)
	}
}

// EncodeAuthTokenRequest encodes requests sent to api AuthToken endpoint.
func EncodeAuthTokenRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*api.AuthTokenPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("api", "AuthToken", "*api.AuthTokenPayload", v)
	}
	return NewProtoAuthTokenRequest(payload), nil
}

// DecodeAuthTokenResponse decodes responses from the api AuthToken endpoint.
func DecodeAuthTokenResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*apipb.AuthTokenResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("api", "AuthToken", "*apipb.AuthTokenResponse", v)
	}
	res := NewAuthTokenResult(message)
	return res, nil
} // BuildCounterGetFunc builds the remote method to invoke for "api" service
// "CounterGet" endpoint.
func BuildCounterGetFunc(grpccli apipb.APIClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CounterGet(ctx, reqpb.(*apipb.CounterGetRequest), opts...)
		}
		return grpccli.CounterGet(ctx, &apipb.CounterGetRequest{}, opts...)
	}
}

// EncodeCounterGetRequest encodes requests sent to api CounterGet endpoint.
func EncodeCounterGetRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*api.CounterGetPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("api", "CounterGet", "*api.CounterGetPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewProtoCounterGetRequest(), nil
}

// DecodeCounterGetResponse decodes responses from the api CounterGet endpoint.
func DecodeCounterGetResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*apipb.CounterGetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("api", "CounterGet", "*apipb.CounterGetResponse", v)
	}
	res := NewCounterGetResult(message)
	vres := &apiviews.CounterInfo{Projected: res, View: view}
	if err := apiviews.ValidateCounterInfo(vres); err != nil {
		return nil, err
	}
	return api.NewCounterInfo(vres), nil
} // BuildCounterIncrementFunc builds the remote method to invoke for "api"
// service "CounterIncrement" endpoint.
func BuildCounterIncrementFunc(grpccli apipb.APIClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CounterIncrement(ctx, reqpb.(*apipb.CounterIncrementRequest), opts...)
		}
		return grpccli.CounterIncrement(ctx, &apipb.CounterIncrementRequest{}, opts...)
	}
}

// EncodeCounterIncrementRequest encodes requests sent to api CounterIncrement
// endpoint.
func EncodeCounterIncrementRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*api.CounterIncrementPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("api", "CounterIncrement", "*api.CounterIncrementPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewProtoCounterIncrementRequest(payload), nil
}

// DecodeCounterIncrementResponse decodes responses from the api
// CounterIncrement endpoint.
func DecodeCounterIncrementResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*apipb.CounterIncrementResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("api", "CounterIncrement", "*apipb.CounterIncrementResponse", v)
	}
	res := NewCounterIncrementResult(message)
	vres := &apiviews.CounterInfo{Projected: res, View: view}
	if err := apiviews.ValidateCounterInfo(vres); err != nil {
		return nil, err
	}
	return api.NewCounterInfo(vres), nil
}
