// Code generated by goa v3.19.1, DO NOT EDIT.
//
// api gRPC client types
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package client

import (
	api "github.com/jace-ys/countup/api/v1/gen/api"
	apiviews "github.com/jace-ys/countup/api/v1/gen/api/views"
	apipb "github.com/jace-ys/countup/api/v1/gen/grpc/api/pb"
)

// NewProtoAuthTokenRequest builds the gRPC request type from the payload of
// the "AuthToken" endpoint of the "api" service.
func NewProtoAuthTokenRequest(payload *api.AuthTokenPayload) *apipb.AuthTokenRequest {
	message := &apipb.AuthTokenRequest{
		Provider:    payload.Provider,
		AccessToken: payload.AccessToken,
	}
	return message
}

// NewAuthTokenResult builds the result type of the "AuthToken" endpoint of the
// "api" service from the gRPC response type.
func NewAuthTokenResult(message *apipb.AuthTokenResponse) *api.AuthTokenResult {
	result := &api.AuthTokenResult{
		Token: message.Token,
	}
	return result
}

// NewProtoCounterGetRequest builds the gRPC request type from the payload of
// the "CounterGet" endpoint of the "api" service.
func NewProtoCounterGetRequest() *apipb.CounterGetRequest {
	message := &apipb.CounterGetRequest{}
	return message
}

// NewCounterGetResult builds the result type of the "CounterGet" endpoint of
// the "api" service from the gRPC response type.
func NewCounterGetResult(message *apipb.CounterGetResponse) *apiviews.CounterInfoView {
	result := &apiviews.CounterInfoView{
		Count:           &message.Count,
		LastIncrementBy: &message.LastIncrementBy,
		LastIncrementAt: &message.LastIncrementAt,
		NextFinalizeAt:  &message.NextFinalizeAt,
	}
	return result
}

// NewProtoCounterIncrementRequest builds the gRPC request type from the
// payload of the "CounterIncrement" endpoint of the "api" service.
func NewProtoCounterIncrementRequest(payload *api.CounterIncrementPayload) *apipb.CounterIncrementRequest {
	message := &apipb.CounterIncrementRequest{
		User: payload.User,
	}
	return message
}

// NewCounterIncrementResult builds the result type of the "CounterIncrement"
// endpoint of the "api" service from the gRPC response type.
func NewCounterIncrementResult(message *apipb.CounterIncrementResponse) *apiviews.CounterInfoView {
	result := &apiviews.CounterInfoView{
		Count:           &message.Count,
		LastIncrementBy: &message.LastIncrementBy,
		LastIncrementAt: &message.LastIncrementAt,
		NextFinalizeAt:  &message.NextFinalizeAt,
	}
	return result
}
