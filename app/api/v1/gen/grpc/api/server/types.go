// Code generated by goa v3.19.1, DO NOT EDIT.
//
// api gRPC server types
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package server

import (
	api "github.com/jace-ys/countup/api/v1/gen/api"
	apiviews "github.com/jace-ys/countup/api/v1/gen/api/views"
	apipb "github.com/jace-ys/countup/api/v1/gen/grpc/api/pb"
)

// NewProtoCounterGetResponse builds the gRPC response type from the result of
// the "CounterGet" endpoint of the "api" service.
func NewProtoCounterGetResponse(result *apiviews.CounterInfoView) *apipb.CounterGetResponse {
	message := &apipb.CounterGetResponse{
		Count:           *result.Count,
		LastIncrementBy: *result.LastIncrementBy,
		LastIncrementAt: *result.LastIncrementAt,
		NextFinalizeAt:  *result.NextFinalizeAt,
	}
	return message
}

// NewCounterIncrementPayload builds the payload of the "CounterIncrement"
// endpoint of the "api" service from the gRPC request type.
func NewCounterIncrementPayload(message *apipb.CounterIncrementRequest) *api.CounterIncrementPayload {
	v := &api.CounterIncrementPayload{
		User: message.User,
	}
	return v
}

// NewProtoCounterIncrementResponse builds the gRPC response type from the
// result of the "CounterIncrement" endpoint of the "api" service.
func NewProtoCounterIncrementResponse(result *apiviews.CounterInfoView) *apipb.CounterIncrementResponse {
	message := &apipb.CounterIncrementResponse{
		Count:           *result.Count,
		LastIncrementBy: *result.LastIncrementBy,
		LastIncrementAt: *result.LastIncrementAt,
		NextFinalizeAt:  *result.NextFinalizeAt,
	}
	return message
}

// NewEchoPayload builds the payload of the "Echo" endpoint of the "api"
// service from the gRPC request type.
func NewEchoPayload(message *apipb.EchoRequest) *api.EchoPayload {
	v := &api.EchoPayload{
		Text: message.Text,
	}
	return v
}

// NewProtoEchoResponse builds the gRPC response type from the result of the
// "Echo" endpoint of the "api" service.
func NewProtoEchoResponse(result *api.EchoResult) *apipb.EchoResponse {
	message := &apipb.EchoResponse{
		Text: result.Text,
	}
	return message
}
