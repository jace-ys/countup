// Code generated by goa v3.19.1, DO NOT EDIT.
//
// api gRPC server types
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package server

import (
	api "github.com/jace-ys/countup/api/v1/gen/api"
	apiviews "github.com/jace-ys/countup/api/v1/gen/api/views"
	apipb "github.com/jace-ys/countup/api/v1/gen/grpc/api/pb"
	goa "goa.design/goa/v3/pkg"
)

// NewAuthTokenPayload builds the payload of the "AuthToken" endpoint of the
// "api" service from the gRPC request type.
func NewAuthTokenPayload(message *apipb.AuthTokenRequest) *api.AuthTokenPayload {
	v := &api.AuthTokenPayload{
		Provider:    message.Provider,
		AccessToken: message.AccessToken,
	}
	return v
}

// NewProtoAuthTokenResponse builds the gRPC response type from the result of
// the "AuthToken" endpoint of the "api" service.
func NewProtoAuthTokenResponse(result *api.AuthTokenResult) *apipb.AuthTokenResponse {
	message := &apipb.AuthTokenResponse{
		Token: result.Token,
	}
	return message
}

// NewProtoCounterGetResponse builds the gRPC response type from the result of
// the "CounterGet" endpoint of the "api" service.
func NewProtoCounterGetResponse(result *apiviews.CounterInfoView) *apipb.CounterGetResponse {
	message := &apipb.CounterGetResponse{
		Count:           *result.Count,
		LastIncrementBy: *result.LastIncrementBy,
		LastIncrementAt: *result.LastIncrementAt,
		NextFinalizeAt:  *result.NextFinalizeAt,
	}
	return message
}

// NewCounterIncrementPayload builds the payload of the "CounterIncrement"
// endpoint of the "api" service from the gRPC request type.
func NewCounterIncrementPayload(token *string) *api.CounterIncrementPayload {
	v := &api.CounterIncrementPayload{}
	v.Token = token
	return v
}

// NewProtoCounterIncrementResponse builds the gRPC response type from the
// result of the "CounterIncrement" endpoint of the "api" service.
func NewProtoCounterIncrementResponse(result *apiviews.CounterInfoView) *apipb.CounterIncrementResponse {
	message := &apipb.CounterIncrementResponse{
		Count:           *result.Count,
		LastIncrementBy: *result.LastIncrementBy,
		LastIncrementAt: *result.LastIncrementAt,
		NextFinalizeAt:  *result.NextFinalizeAt,
	}
	return message
}

// ValidateAuthTokenRequest runs the validations defined on AuthTokenRequest.
func ValidateAuthTokenRequest(message *apipb.AuthTokenRequest) (err error) {
	if !(message.Provider == "google") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.provider", message.Provider, []any{"google"}))
	}
	return
}
