// Code generated by goa v3.19.1, DO NOT EDIT.
//
// api gRPC server
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package server

import (
	"context"
	"errors"

	api "github.com/jace-ys/countup/api/v1/gen/api"
	apipb "github.com/jace-ys/countup/api/v1/gen/grpc/api/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the apipb.APIServer interface.
type Server struct {
	CounterGetH       goagrpc.UnaryHandler
	CounterIncrementH goagrpc.UnaryHandler
	EchoH             goagrpc.UnaryHandler
	apipb.UnimplementedAPIServer
}

// New instantiates the server struct with the api service endpoints.
func New(e *api.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		CounterGetH:       NewCounterGetHandler(e.CounterGet, uh),
		CounterIncrementH: NewCounterIncrementHandler(e.CounterIncrement, uh),
		EchoH:             NewEchoHandler(e.Echo, uh),
	}
}

// NewCounterGetHandler creates a gRPC handler which serves the "api" service
// "CounterGet" endpoint.
func NewCounterGetHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeCounterGetResponse)
	}
	return h
}

// CounterGet implements the "CounterGet" method in apipb.APIServer interface.
func (s *Server) CounterGet(ctx context.Context, message *apipb.CounterGetRequest) (*apipb.CounterGetResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "CounterGet")
	ctx = context.WithValue(ctx, goa.ServiceKey, "api")
	resp, err := s.CounterGetH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "existing_increment_request":
				return nil, goagrpc.NewStatusError(codes.AlreadyExists, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*apipb.CounterGetResponse), nil
}

// NewCounterIncrementHandler creates a gRPC handler which serves the "api"
// service "CounterIncrement" endpoint.
func NewCounterIncrementHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCounterIncrementRequest, EncodeCounterIncrementResponse)
	}
	return h
}

// CounterIncrement implements the "CounterIncrement" method in apipb.APIServer
// interface.
func (s *Server) CounterIncrement(ctx context.Context, message *apipb.CounterIncrementRequest) (*apipb.CounterIncrementResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "CounterIncrement")
	ctx = context.WithValue(ctx, goa.ServiceKey, "api")
	resp, err := s.CounterIncrementH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "existing_increment_request":
				return nil, goagrpc.NewStatusError(codes.AlreadyExists, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*apipb.CounterIncrementResponse), nil
}

// NewEchoHandler creates a gRPC handler which serves the "api" service "Echo"
// endpoint.
func NewEchoHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeEchoRequest, EncodeEchoResponse)
	}
	return h
}

// Echo implements the "Echo" method in apipb.APIServer interface.
func (s *Server) Echo(ctx context.Context, message *apipb.EchoRequest) (*apipb.EchoResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Echo")
	ctx = context.WithValue(ctx, goa.ServiceKey, "api")
	resp, err := s.EchoH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "existing_increment_request":
				return nil, goagrpc.NewStatusError(codes.AlreadyExists, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*apipb.EchoResponse), nil
}
