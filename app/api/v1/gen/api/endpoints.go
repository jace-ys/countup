// Code generated by goa v3.19.1, DO NOT EDIT.
//
// api endpoints
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package api

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "api" service endpoints.
type Endpoints struct {
	CounterGet       goa.Endpoint
	CounterIncrement goa.Endpoint
	Echo             goa.Endpoint
}

// NewEndpoints wraps the methods of the "api" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		CounterGet:       NewCounterGetEndpoint(s),
		CounterIncrement: NewCounterIncrementEndpoint(s),
		Echo:             NewEchoEndpoint(s),
	}
}

// Use applies the given middleware to all the "api" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CounterGet = m(e.CounterGet)
	e.CounterIncrement = m(e.CounterIncrement)
	e.Echo = m(e.Echo)
}

// NewCounterGetEndpoint returns an endpoint function that calls the method
// "CounterGet" of service "api".
func NewCounterGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		res, err := s.CounterGet(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCounterInfo(res, "default")
		return vres, nil
	}
}

// NewCounterIncrementEndpoint returns an endpoint function that calls the
// method "CounterIncrement" of service "api".
func NewCounterIncrementEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CounterIncrementPayload)
		res, err := s.CounterIncrement(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCounterInfo(res, "default")
		return vres, nil
	}
}

// NewEchoEndpoint returns an endpoint function that calls the method "Echo" of
// service "api".
func NewEchoEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*EchoPayload)
		return s.Echo(ctx, p)
	}
}
