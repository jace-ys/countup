// Code generated by goa v3.19.1, DO NOT EDIT.
//
// api views
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// CounterInfo is the viewed result type that is projected based on a view.
type CounterInfo struct {
	// Type to project
	Projected *CounterInfoView
	// View to render
	View string
}

// CounterInfoView is a type that runs validations on a projected type.
type CounterInfoView struct {
	Count           *int32
	LastIncrementBy *string
	LastIncrementAt *string
	NextFinalizeAt  *string
}

var (
	// CounterInfoMap is a map indexing the attribute names of CounterInfo by view
	// name.
	CounterInfoMap = map[string][]string{
		"default": {
			"count",
			"last_increment_by",
			"last_increment_at",
			"next_finalize_at",
		},
	}
)

// ValidateCounterInfo runs the validations defined on the viewed result type
// CounterInfo.
func ValidateCounterInfo(result *CounterInfo) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCounterInfoView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateCounterInfoView runs the validations defined on CounterInfoView
// using the "default" view.
func ValidateCounterInfoView(result *CounterInfoView) (err error) {
	if result.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "result"))
	}
	if result.LastIncrementBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_increment_by", "result"))
	}
	if result.LastIncrementAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_increment_at", "result"))
	}
	if result.NextFinalizeAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("next_finalize_at", "result"))
	}
	return
}
