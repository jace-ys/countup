// Code generated by goa v3.21.0, DO NOT EDIT.
//
// api HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package client

import (
	"encoding/json"
	"fmt"

	api "github.com/jace-ys/countup/api/v1/gen/api"
	goa "goa.design/goa/v3/pkg"
)

// BuildAuthTokenPayload builds the payload for the api AuthToken endpoint from
// CLI flags.
func BuildAuthTokenPayload(apiAuthTokenBody string) (*api.AuthTokenPayload, error) {
	var err error
	var body AuthTokenRequestBody
	{
		err = json.Unmarshal([]byte(apiAuthTokenBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"access_token\": \"Itaque unde qui ut molestiae et omnis.\",\n      \"provider\": \"google\"\n   }'")
		}
		if !(body.Provider == "google") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", body.Provider, []any{"google"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &api.AuthTokenPayload{
		Provider:    body.Provider,
		AccessToken: body.AccessToken,
	}

	return v, nil
}

// BuildCounterIncrementPayload builds the payload for the api CounterIncrement
// endpoint from CLI flags.
func BuildCounterIncrementPayload(apiCounterIncrementToken string) (*api.CounterIncrementPayload, error) {
	var token *string
	{
		if apiCounterIncrementToken != "" {
			token = &apiCounterIncrementToken
		}
	}
	v := &api.CounterIncrementPayload{}
	v.Token = token

	return v, nil
}
