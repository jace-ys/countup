// Code generated by goa v3.19.1, DO NOT EDIT.
//
// api HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package client

import (
	"encoding/json"
	"fmt"

	api "github.com/jace-ys/countup/api/v1/gen/api"
)

// BuildCounterIncrementPayload builds the payload for the api CounterIncrement
// endpoint from CLI flags.
func BuildCounterIncrementPayload(apiCounterIncrementBody string) (*api.CounterIncrementPayload, error) {
	var err error
	var body CounterIncrementRequestBody
	{
		err = json.Unmarshal([]byte(apiCounterIncrementBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"user\": \"Nihil doloribus et sed sequi consequatur.\"\n   }'")
		}
	}
	v := &api.CounterIncrementPayload{
		User: body.User,
	}

	return v, nil
}

// BuildEchoPayload builds the payload for the api Echo endpoint from CLI flags.
func BuildEchoPayload(apiEchoBody string) (*api.EchoPayload, error) {
	var err error
	var body EchoRequestBody
	{
		err = json.Unmarshal([]byte(apiEchoBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"text\": \"Vel omnis quo sit.\"\n   }'")
		}
	}
	v := &api.EchoPayload{
		Text: body.Text,
	}

	return v, nil
}
