// Code generated by goa v3.19.1, DO NOT EDIT.
//
// api HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	api "github.com/jace-ys/countup/api/v1/gen/api"
	apiviews "github.com/jace-ys/countup/api/v1/gen/api/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildAuthTokenRequest instantiates a HTTP request object with method and
// path set to call the "api" service "AuthToken" endpoint
func (c *Client) BuildAuthTokenRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AuthTokenAPIPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("api", "AuthToken", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAuthTokenRequest returns an encoder for requests sent to the api
// AuthToken server.
func EncodeAuthTokenRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*api.AuthTokenPayload)
		if !ok {
			return goahttp.ErrInvalidType("api", "AuthToken", "*api.AuthTokenPayload", v)
		}
		body := NewAuthTokenRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("api", "AuthToken", err)
		}
		return nil
	}
}

// DecodeAuthTokenResponse returns a decoder for responses returned by the api
// AuthToken endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAuthTokenResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "existing_increment_request" (type *goa.ServiceError): http.StatusTooManyRequests
//   - error: internal error
func DecodeAuthTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AuthTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "AuthToken", err)
			}
			err = ValidateAuthTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("api", "AuthToken", err)
			}
			res := NewAuthTokenResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AuthTokenUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "AuthToken", err)
			}
			err = ValidateAuthTokenUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("api", "AuthToken", err)
			}
			return nil, NewAuthTokenUnauthorized(&body)
		case http.StatusTooManyRequests:
			var (
				body AuthTokenExistingIncrementRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "AuthToken", err)
			}
			err = ValidateAuthTokenExistingIncrementRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("api", "AuthToken", err)
			}
			return nil, NewAuthTokenExistingIncrementRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("api", "AuthToken", resp.StatusCode, string(body))
		}
	}
}

// BuildCounterGetRequest instantiates a HTTP request object with method and
// path set to call the "api" service "CounterGet" endpoint
func (c *Client) BuildCounterGetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CounterGetAPIPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("api", "CounterGet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCounterGetRequest returns an encoder for requests sent to the api
// CounterGet server.
func EncodeCounterGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*api.CounterGetPayload)
		if !ok {
			return goahttp.ErrInvalidType("api", "CounterGet", "*api.CounterGetPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeCounterGetResponse returns a decoder for responses returned by the api
// CounterGet endpoint. restoreBody controls whether the response body should
// be restored after having been read.
// DecodeCounterGetResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "existing_increment_request" (type *goa.ServiceError): http.StatusTooManyRequests
//   - error: internal error
func DecodeCounterGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CounterGetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "CounterGet", err)
			}
			p := NewCounterGetCounterInfoOK(&body)
			view := "default"
			vres := &apiviews.CounterInfo{Projected: p, View: view}
			if err = apiviews.ValidateCounterInfo(vres); err != nil {
				return nil, goahttp.ErrValidationError("api", "CounterGet", err)
			}
			res := api.NewCounterInfo(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CounterGetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "CounterGet", err)
			}
			err = ValidateCounterGetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("api", "CounterGet", err)
			}
			return nil, NewCounterGetUnauthorized(&body)
		case http.StatusTooManyRequests:
			var (
				body CounterGetExistingIncrementRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "CounterGet", err)
			}
			err = ValidateCounterGetExistingIncrementRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("api", "CounterGet", err)
			}
			return nil, NewCounterGetExistingIncrementRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("api", "CounterGet", resp.StatusCode, string(body))
		}
	}
}

// BuildCounterIncrementRequest instantiates a HTTP request object with method
// and path set to call the "api" service "CounterIncrement" endpoint
func (c *Client) BuildCounterIncrementRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CounterIncrementAPIPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("api", "CounterIncrement", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCounterIncrementRequest returns an encoder for requests sent to the
// api CounterIncrement server.
func EncodeCounterIncrementRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*api.CounterIncrementPayload)
		if !ok {
			return goahttp.ErrInvalidType("api", "CounterIncrement", "*api.CounterIncrementPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCounterIncrementRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("api", "CounterIncrement", err)
		}
		return nil
	}
}

// DecodeCounterIncrementResponse returns a decoder for responses returned by
// the api CounterIncrement endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCounterIncrementResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "existing_increment_request" (type *goa.ServiceError): http.StatusTooManyRequests
//   - error: internal error
func DecodeCounterIncrementResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			var (
				body CounterIncrementResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "CounterIncrement", err)
			}
			p := NewCounterIncrementCounterInfoAccepted(&body)
			view := "default"
			vres := &apiviews.CounterInfo{Projected: p, View: view}
			if err = apiviews.ValidateCounterInfo(vres); err != nil {
				return nil, goahttp.ErrValidationError("api", "CounterIncrement", err)
			}
			res := api.NewCounterInfo(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CounterIncrementUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "CounterIncrement", err)
			}
			err = ValidateCounterIncrementUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("api", "CounterIncrement", err)
			}
			return nil, NewCounterIncrementUnauthorized(&body)
		case http.StatusTooManyRequests:
			var (
				body CounterIncrementExistingIncrementRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "CounterIncrement", err)
			}
			err = ValidateCounterIncrementExistingIncrementRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("api", "CounterIncrement", err)
			}
			return nil, NewCounterIncrementExistingIncrementRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("api", "CounterIncrement", resp.StatusCode, string(body))
		}
	}
}
