// Code generated by goa v3.19.1, DO NOT EDIT.
//
// api client HTTP transport
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the api service endpoint HTTP clients.
type Client struct {
	// AuthToken Doer is the HTTP client used to make requests to the AuthToken
	// endpoint.
	AuthTokenDoer goahttp.Doer

	// CounterGet Doer is the HTTP client used to make requests to the CounterGet
	// endpoint.
	CounterGetDoer goahttp.Doer

	// CounterIncrement Doer is the HTTP client used to make requests to the
	// CounterIncrement endpoint.
	CounterIncrementDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the api service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AuthTokenDoer:        doer,
		CounterGetDoer:       doer,
		CounterIncrementDoer: doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// AuthToken returns an endpoint that makes HTTP requests to the api service
// AuthToken server.
func (c *Client) AuthToken() goa.Endpoint {
	var (
		encodeRequest  = EncodeAuthTokenRequest(c.encoder)
		decodeResponse = DecodeAuthTokenResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAuthTokenRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AuthTokenDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("api", "AuthToken", err)
		}
		return decodeResponse(resp)
	}
}

// CounterGet returns an endpoint that makes HTTP requests to the api service
// CounterGet server.
func (c *Client) CounterGet() goa.Endpoint {
	var (
		encodeRequest  = EncodeCounterGetRequest(c.encoder)
		decodeResponse = DecodeCounterGetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCounterGetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CounterGetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("api", "CounterGet", err)
		}
		return decodeResponse(resp)
	}
}

// CounterIncrement returns an endpoint that makes HTTP requests to the api
// service CounterIncrement server.
func (c *Client) CounterIncrement() goa.Endpoint {
	var (
		encodeRequest  = EncodeCounterIncrementRequest(c.encoder)
		decodeResponse = DecodeCounterIncrementResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCounterIncrementRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CounterIncrementDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("api", "CounterIncrement", err)
		}
		return decodeResponse(resp)
	}
}
