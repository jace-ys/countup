// Code generated by goa v3.19.1, DO NOT EDIT.
//
// web HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package server

import (
	"context"
	"errors"
	"net/http"

	web "github.com/jace-ys/countup/api/v1/gen/web"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeIndexResponse returns an encoder for responses returned by the web
// Index endpoint.
func EncodeIndexResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]byte)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/html")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeIndexError returns an encoder for errors returned by the Index web
// endpoint.
func EncodeIndexError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewIndexUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeAnotherResponse returns an encoder for responses returned by the web
// Another endpoint.
func EncodeAnotherResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]byte)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/html")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeAnotherError returns an encoder for errors returned by the Another web
// endpoint.
func EncodeAnotherError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewAnotherUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeLoginGoogleResponse returns an encoder for responses returned by the
// web LoginGoogle endpoint.
func EncodeLoginGoogleResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*web.LoginGoogleResult)
		w.Header().Set("Location", res.RedirectURL)
		sessionCookie := res.SessionCookie
		http.SetCookie(w, &http.Cookie{
			Name:     "countup.session",
			Value:    sessionCookie,
			MaxAge:   86400,
			Path:     "/",
			HttpOnly: true,
			SameSite: http.SameSiteLaxMode,
		})
		w.WriteHeader(http.StatusFound)
		return nil
	}
}

// EncodeLoginGoogleError returns an encoder for errors returned by the
// LoginGoogle web endpoint.
func EncodeLoginGoogleError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewLoginGoogleUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeLoginGoogleCallbackResponse returns an encoder for responses returned
// by the web LoginGoogleCallback endpoint.
func EncodeLoginGoogleCallbackResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*web.LoginGoogleCallbackResult)
		w.Header().Set("Location", res.RedirectURL)
		sessionCookie := res.SessionCookie
		http.SetCookie(w, &http.Cookie{
			Name:     "countup.session",
			Value:    sessionCookie,
			MaxAge:   86400,
			Path:     "/",
			HttpOnly: true,
			SameSite: http.SameSiteLaxMode,
		})
		w.WriteHeader(http.StatusFound)
		return nil
	}
}

// DecodeLoginGoogleCallbackRequest returns a decoder for requests sent to the
// web LoginGoogleCallback endpoint.
func DecodeLoginGoogleCallbackRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			code          string
			state         string
			sessionCookie string
			err           error
			c             *http.Cookie
		)
		qp := r.URL.Query()
		code = qp.Get("code")
		if code == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("code", "query string"))
		}
		state = qp.Get("state")
		if state == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("state", "query string"))
		}
		c, err = r.Cookie("countup.session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
		} else {
			sessionCookie = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewLoginGoogleCallbackPayload(code, state, sessionCookie)

		return payload, nil
	}
}

// EncodeLoginGoogleCallbackError returns an encoder for errors returned by the
// LoginGoogleCallback web endpoint.
func EncodeLoginGoogleCallbackError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewLoginGoogleCallbackUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeLogoutResponse returns an encoder for responses returned by the web
// Logout endpoint.
func EncodeLogoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*web.LogoutResult)
		w.Header().Set("Location", res.RedirectURL)
		sessionCookie := res.SessionCookie
		http.SetCookie(w, &http.Cookie{
			Name:     "countup.session",
			Value:    sessionCookie,
			MaxAge:   86400,
			Path:     "/",
			HttpOnly: true,
			SameSite: http.SameSiteLaxMode,
		})
		w.WriteHeader(http.StatusFound)
		return nil
	}
}

// DecodeLogoutRequest returns a decoder for requests sent to the web Logout
// endpoint.
func DecodeLogoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionCookie string
			err           error
			c             *http.Cookie
		)
		c, err = r.Cookie("countup.session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
		} else {
			sessionCookie = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewLogoutPayload(sessionCookie)

		return payload, nil
	}
}

// EncodeLogoutError returns an encoder for errors returned by the Logout web
// endpoint.
func EncodeLogoutError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewLogoutUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeSessionTokenResponse returns an encoder for responses returned by the
// web SessionToken endpoint.
func EncodeSessionTokenResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*web.SessionTokenResult)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewSessionTokenResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSessionTokenRequest returns a decoder for requests sent to the web
// SessionToken endpoint.
func DecodeSessionTokenRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionCookie string
			err           error
			c             *http.Cookie
		)
		c, err = r.Cookie("countup.session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_cookie", "cookie"))
		} else {
			sessionCookie = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewSessionTokenPayload(sessionCookie)

		return payload, nil
	}
}

// EncodeSessionTokenError returns an encoder for errors returned by the
// SessionToken web endpoint.
func EncodeSessionTokenError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewSessionTokenUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
