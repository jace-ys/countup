// Code generated by goa v3.19.1, DO NOT EDIT.
//
// countup HTTP client CLI support package
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	apic "github.com/jace-ys/countup/api/v1/gen/http/api/client"
	webc "github.com/jace-ys/countup/api/v1/gen/http/web/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `api (counter-get|counter-increment|echo)
web (index|another)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` api counter-get` + "\n" +
		os.Args[0] + ` web index` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		apiFlags = flag.NewFlagSet("api", flag.ContinueOnError)

		apiCounterGetFlags = flag.NewFlagSet("counter-get", flag.ExitOnError)

		apiCounterIncrementFlags    = flag.NewFlagSet("counter-increment", flag.ExitOnError)
		apiCounterIncrementBodyFlag = apiCounterIncrementFlags.String("body", "REQUIRED", "")

		apiEchoFlags    = flag.NewFlagSet("echo", flag.ExitOnError)
		apiEchoBodyFlag = apiEchoFlags.String("body", "REQUIRED", "")

		webFlags = flag.NewFlagSet("web", flag.ContinueOnError)

		webIndexFlags = flag.NewFlagSet("index", flag.ExitOnError)

		webAnotherFlags = flag.NewFlagSet("another", flag.ExitOnError)
	)
	apiFlags.Usage = apiUsage
	apiCounterGetFlags.Usage = apiCounterGetUsage
	apiCounterIncrementFlags.Usage = apiCounterIncrementUsage
	apiEchoFlags.Usage = apiEchoUsage

	webFlags.Usage = webUsage
	webIndexFlags.Usage = webIndexUsage
	webAnotherFlags.Usage = webAnotherUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "api":
			svcf = apiFlags
		case "web":
			svcf = webFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "api":
			switch epn {
			case "counter-get":
				epf = apiCounterGetFlags

			case "counter-increment":
				epf = apiCounterIncrementFlags

			case "echo":
				epf = apiEchoFlags

			}

		case "web":
			switch epn {
			case "index":
				epf = webIndexFlags

			case "another":
				epf = webAnotherFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "api":
			c := apic.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "counter-get":
				endpoint = c.CounterGet()
			case "counter-increment":
				endpoint = c.CounterIncrement()
				data, err = apic.BuildCounterIncrementPayload(*apiCounterIncrementBodyFlag)
			case "echo":
				endpoint = c.Echo()
				data, err = apic.BuildEchoPayload(*apiEchoBodyFlag)
			}
		case "web":
			c := webc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "index":
				endpoint = c.Index()
			case "another":
				endpoint = c.Another()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// apiUsage displays the usage of the api command and its subcommands.
func apiUsage() {
	fmt.Fprintf(os.Stderr, `Service is the api service interface.
Usage:
    %[1]s [globalflags] api COMMAND [flags]

COMMAND:
    counter-get: CounterGet implements CounterGet.
    counter-increment: CounterIncrement implements CounterIncrement.
    echo: Echo implements Echo.

Additional help:
    %[1]s api COMMAND --help
`, os.Args[0])
}
func apiCounterGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] api counter-get

CounterGet implements CounterGet.

Example:
    %[1]s api counter-get
`, os.Args[0])
}

func apiCounterIncrementUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] api counter-increment -body JSON

CounterIncrement implements CounterIncrement.
    -body JSON: 

Example:
    %[1]s api counter-increment --body '{
      "user": "Nihil doloribus et sed sequi consequatur."
   }'
`, os.Args[0])
}

func apiEchoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] api echo -body JSON

Echo implements Echo.
    -body JSON: 

Example:
    %[1]s api echo --body '{
      "text": "Vel omnis quo sit."
   }'
`, os.Args[0])
}

// webUsage displays the usage of the web command and its subcommands.
func webUsage() {
	fmt.Fprintf(os.Stderr, `Service is the web service interface.
Usage:
    %[1]s [globalflags] web COMMAND [flags]

COMMAND:
    index: Index implements index.
    another: Another implements another.

Additional help:
    %[1]s web COMMAND --help
`, os.Args[0])
}
func webIndexUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] web index

Index implements index.

Example:
    %[1]s web index
`, os.Args[0])
}

func webAnotherUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] web another

Another implements another.

Example:
    %[1]s web another
`, os.Args[0])
}
