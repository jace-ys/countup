// Code generated by goa v3.19.1, DO NOT EDIT.
//
// teapot HTTP server
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package server

import (
	"context"
	"net/http"
	"path"

	teapot "github.com/jace-ys/countup/api/v1/gen/teapot"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the teapot service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	Echo                http.Handler
	GenHTTPOpenapi3JSON http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the teapot service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *teapot.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3JSON = appendPrefix(fileSystemGenHTTPOpenapi3JSON, "/gen/http")
	return &Server{
		Mounts: []*MountPoint{
			{"Echo", "POST", "/teapot/echo"},
			{"Serve gen/http/openapi3.json", "GET", "/teapot/openapi.json"},
		},
		Echo:                NewEchoHandler(e.Echo, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapi3JSON: http.FileServer(fileSystemGenHTTPOpenapi3JSON),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "teapot" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Echo = m(s.Echo)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return teapot.MethodNames[:] }

// Mount configures the mux to serve the teapot endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountEchoHandler(mux, h.Echo)
	MountGenHTTPOpenapi3JSON(mux, http.StripPrefix("/teapot", h.GenHTTPOpenapi3JSON))
}

// Mount configures the mux to serve the teapot endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountEchoHandler configures the mux to serve the "teapot" service "Echo"
// endpoint.
func MountEchoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/teapot/echo", f)
}

// NewEchoHandler creates a HTTP handler which loads the HTTP request and calls
// the "teapot" service "Echo" endpoint.
func NewEchoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeEchoRequest(mux, decoder)
		encodeResponse = EncodeEchoResponse(encoder)
		encodeError    = EncodeEchoError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Echo")
		ctx = context.WithValue(ctx, goa.ServiceKey, "teapot")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// appendFS is a custom implementation of fs.FS that appends a specified prefix
// to the file paths before delegating the Open call to the underlying fs.FS.
type appendFS struct {
	prefix string
	fs     http.FileSystem
}

// Open opens the named file, appending the prefix to the file path before
// passing it to the underlying fs.FS.
func (s appendFS) Open(name string) (http.File, error) {
	switch name {
	case "/openapi.json":
		name = "/openapi3.json"
	}
	return s.fs.Open(path.Join(s.prefix, name))
}

// appendPrefix returns a new fs.FS that appends the specified prefix to file paths
// before delegating to the provided embed.FS.
func appendPrefix(fsys http.FileSystem, prefix string) http.FileSystem {
	return appendFS{prefix: prefix, fs: fsys}
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/teapot/openapi.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/teapot/openapi.json", h.ServeHTTP)
}
