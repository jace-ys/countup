// Code generated by goa v3.19.1, DO NOT EDIT.
//
// teapot HTTP client types
//
// Command:
// $ goa gen github.com/jace-ys/countup/api/v1 -o api/v1

package client

import (
	teapot "github.com/jace-ys/countup/api/v1/gen/teapot"
	goa "goa.design/goa/v3/pkg"
)

// EchoRequestBody is the type of the "teapot" service "Echo" endpoint HTTP
// request body.
type EchoRequestBody struct {
	Text string `form:"text" json:"text" xml:"text"`
}

// EchoResponseBody is the type of the "teapot" service "Echo" endpoint HTTP
// response body.
type EchoResponseBody struct {
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
}

// EchoUnwellResponseBody is the type of the "teapot" service "Echo" endpoint
// HTTP response body for the "unwell" error.
type EchoUnwellResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewEchoRequestBody builds the HTTP request body from the payload of the
// "Echo" endpoint of the "teapot" service.
func NewEchoRequestBody(p *teapot.EchoPayload) *EchoRequestBody {
	body := &EchoRequestBody{
		Text: p.Text,
	}
	return body
}

// NewEchoResultOK builds a "teapot" service "Echo" endpoint result from a HTTP
// "OK" response.
func NewEchoResultOK(body *EchoResponseBody) *teapot.EchoResult {
	v := &teapot.EchoResult{
		Text: *body.Text,
	}

	return v
}

// NewEchoUnwell builds a teapot service Echo endpoint unwell error.
func NewEchoUnwell(body *EchoUnwellResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateEchoResponseBody runs the validations defined on EchoResponseBody
func ValidateEchoResponseBody(body *EchoResponseBody) (err error) {
	if body.Text == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("text", "body"))
	}
	return
}

// ValidateEchoUnwellResponseBody runs the validations defined on
// Echo_unwell_Response_Body
func ValidateEchoUnwellResponseBody(body *EchoUnwellResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
